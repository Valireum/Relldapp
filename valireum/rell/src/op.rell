module;
import m: main;
import f: func;
import c: config;





// USER
operation user_create(p: pubkey, n: name, nonce: integer) {
	//require(is_signer(p), "Unauthorized transaction");
	val id = (p, n).hash();
	require((m.user@*{.name == n}).size() < 1, "User Already Exist");
	val u = create m.user(id = id, name = n, pubkey = p);
	//create m.user_stats(user = u);
	f.f_create_user_balance(u);
}



// token
operation token_create(n: name, s: text, t: boolean, drop_amount: integer){
	//require(is_signer(c.config.store), "Unauthorized transaction");
	val Id = (n, s, t).hash();
	create m.token(id = Id, name = n, symbol = s);
	f.f_airdrop(drop_amount, s);
	
}


// add item listing
operation add_item_listing (p:pubkey, itemid:byte_array, idx:integer, price:decimal, offer:integer, expire:integer, nonce:integer){
	require(is_signer(p), "Unauthorized transaction");
	val GetUser = m.user@{.pubkey == p};
	val GetItem = m.inventory@{.item_inst.id == idx and .item_inst.item.id == itemid};
	val Id = (itemid, idx).hash();
	val created = op_context.last_block_time;
	create m.item_listing(id = Id, GetItem.item_inst, price, GetUser, created, expire, m.sale_offer.value(offer));
	delete GetItem;
}

// buy listing
operation buy_listing (p:pubkey, listing_id:list<byte_array>, nonce:integer){
	require(is_signer(p), "Unauthorized transaction");
	val GetUser = m.user@{.pubkey == p};
	for (id in listing_id) {
		val GetListing = m.item_listing@{.id == id};
		require(m.balance@{.user == GetUser}.amount >= GetListing.price, "Balance too low");
		require(GetUser != GetListing.seller, "This item is already yours");
		create m.inventory(GetUser, GetListing.item_inst);
		update m.balance@{.user == GetUser}(.amount -= GetListing.price);
		update m.balance@{.user == GetListing.seller}(.amount += GetListing.price);
		val Id = (m.item_listing_history@*{}).size();
		val timestamp = op_context.last_block_time;
		create m.item_listing_history(id = Id, GetListing.item_inst, buyer = GetUser, seller = GetListing.seller, GetListing.price, date = timestamp);
		delete GetListing;
	}
	
	
}

operation cancel_listing(p:pubkey, listing_id:list<byte_array>, nonce:integer) {
	require(is_signer(p), "Unauthorized transaction");
	val GetUser = m.user@{.pubkey == p};
	for (id in listing_id) {
		val GetListing = m.item_listing@{.id == id};
		require(GetListing.seller == GetUser, "Unauthorized action");
		create m.inventory(GetUser, GetListing.item_inst);
		delete GetListing;
	}
	
}




//Store
//operation add_token_topubkey (to: pubkey, token_symbol: text, add_amount: decimal, payment_method: text, payment_amount: decimal, payment_txid: text) {
//	require(is_signer(c.config.store), "Unauthorized transaction");
//	val buyer = m.user@{.pubkey == to};
//	val stoken = m.token@{.symbol == token_symbol};
//	update m.balance@{.user == buyer, .token == stoken}(.amount += add_amount);
//	val timestamp = op_context.last_block_time;
//	val id = (buyer, add_amount, timestamp, stoken, payment_txid).hash();
//	create m.token_sales(id, buyer, stoken, amount = add_amount, payment_method, payment_amount, payment_txid, timestamp);
//}

// User operations

// token_transfer
operation token_transfer(from: pubkey, to: pubkey, token_symbol: text, t_amount: decimal, nonce: integer/*bug work around*/) {
	require(is_signer(from), "Unauthorized transaction");
	val stoken = m.token@{.symbol == token_symbol};
	//require( stoken.transferable, "Asset not transferable" );
	require( t_amount > 0, "Amount is too low" );
	val u_from = m.user@{.pubkey == from};
	val u_to = m.user@{.pubkey == to};
	
	
	require( m.balance@{.user == u_from, .token == stoken}.amount >= t_amount, "Balance is too low" );
	update m.balance@{.user == u_from, .token == stoken}(.amount -= t_amount);
	update m.balance@{.user == u_to, .token == stoken}(.amount += t_amount);

	val timestamp = op_context.last_block_time;
	val id = (from , to, t_amount, timestamp, token_symbol).hash();
    create m.token_transactions (id, stoken, sender = u_from, receiver = u_to, amount = t_amount, timestamp);
}

// nft transfer

//operation nft_transfer (from: pubkey, to: pubkey, nftid: byte_array, nonce: integer/*bug work around*/){
//	require(is_signer(from), "Unauthorized transaction");
//	val sender = m.user@{.pubkey == from};
//	val receiver = m.user@{.pubkey == to};
//	val item = m.nft_obj@{.id == nftid};
//	val nftobj = m.nft_ownership@?{.user == sender and .nft_obj == item};
//	require_not_empty(nftobj, "NFT not found");
//
//	delete nftobj;
//	create m.nft_ownership(receiver, item);
//	val timestamp = op_context.last_block_time;
//	val Id = (from , to, nftobj, timestamp).hash();
//	create m.nft_transactions(id = Id, sender = sender, receiver = receiver, nft_obj = item, date = timestamp);
//	
//	
//}



// item listing to redo

//operation create_nft_listing(itemid:byte_array, price:decimal, expire:timestamp, promoted:boolean) {
//	val nft_item = m.item_inst@{.id == itemid};
//	val owner = m.nft_ownership@?{nft_item}.user;
//	require(owner, "Item has no owner");
//	require(is_signer(owner.pubkey), "Unauthorized transaction");
//	val Id = (m.nft_obj_listing@*{}).size();
//	create m.nft_obj_listing(id = Id, item = nft_item, price = price, expire = expire, promoted = promoted);
//}

//redo

//operation deleteListing(listing_id: integer) {
//	val itemtodelete = m.nft_obj_listing@{.id == listing_id};
//	val owner = m.nft_ownership@{itemtodelete.item}.user;
//	require(is_signer(owner.pubkey), "Unauthorized transaction");
//	val activebids = m.market_bids@?{.item.id == listing_id};
//	require(activebids == null, "You can't delete a listing with active bids");
//	
//	delete itemtodelete;
//}

// user create bid redo
//operation create_market_bids(bidder:pubkey, bid:decimal, listing_id: integer) {
//	require(is_signer(bidder), "Unauthorized transaction");
//	val buser = m.user@{.pubkey == bidder};
//	val vlmbalance = m.balance@{.user == buser, .token.symbol == 'VLM'}.amount;
//	val timestamp = op_context.last_block_time;
//	//check if i have active bid on this item
//	val activebid = m.market_bids@?{.bidder == buser , .item.id == listing_id};
//	if (activebid != null) {
//		// update
//		require(bid > activebid.amount, "New bid is lower than the active bid");
//		val reqBalance = bid-activebid.amount;
//		require(vlmbalance >= reqBalance, "Balance too low");
//		update m.balance@{.user == buser, .token.symbol == 'VLM'}(.amount -= reqBalance);
//		update m.market_bids@{.id == activebid.id}(.amount += reqBalance, .time = timestamp);
//	} else {
//		//create new
//		val item = m.nft_obj_listing@{.id == listing_id};
//		require(vlmbalance >= bid, "Balance too low");
//		val Id = (m.market_bids@*{item}).size();
//		update m.balance@{.user == buser, .token.symbol == 'VLM'}(.amount -= bid);
//		create m.market_bids(id = Id, buser, amount = bid, item = item, time = timestamp);
//	}
//		
//}


// server update state
//operation updatelisting_state(listing_id: integer, newstate:integer) {
//	//require(is_signer(c.config.store), "Unauthorized transaction");
//	update m.nft_obj_listing@{.id == listing_id}(.listing_state = m.listing_state.value(newstate));
//}

//operation expired_nft_obj_listing(listing_id: integer, time:timestamp) {
//	//require(is_signer(c.config.store), "Unauthorized transaction");
//	val item = m.nft_obj_listing@?{.id == listing_id};
//	require(item, "Id not found");
//	if (item.expire >= time) {
//		// get bids
//		val bestbid = m.market_bids@?{.item == item}(@sort_desc .amount, .id, .bidder);
//		if (bestbid != null) {
//			update m.nft_obj_listing@{.id == listing_id}(.listing_state = m.listing_state.value(1));
//			val seller_ownership = m.nft_ownership@{.nft_obj == item.item};
//			update m.balance@{.user == seller_ownership.user, .token.symbol == 'VLM'}(.amount += bestbid.amount);
//			val Id = (m.market_history@*{}).size();
//			create m.market_history(id = Id, listing = item, buyer = bestbid.bidder.pubkey, seller = seller_ownership.user.pubkey, price = bestbid.amount, date = time);
//			delete seller_ownership;
//			create m.nft_ownership(bestbid.bidder, item.item);
//			delete m.market_bids@{.id == bestbid.id};
//			
//			//clear bids
//			val bids = m.market_bids@*{.item == item};
//			for (b in bids) {
//				update m.balance@{b.bidder, .token.symbol == 'VLM'}(.amount += b.amount);
//			}
//			delete bids;
//		}
//		else {
//			delete item;
//		}
//	}
//}



module;

import m: main;
import c: config;
import f: func;
// chromia explorer queries
namespace ft3 {
	query get_blockchain_info() {
		return (name = c.config.name, website = c.config.website, description = c.config.description);
	}
}


// all items queries ids
query get_items_ids(): list<(id:byte_array)>{
	return m.item@*{}(id = .id);
} 

query get_users_ids(): list<(id:byte_array)>{
	return m.user@*{}(id = .id);
} 

query get_tokens_ids(): list<(id:byte_array)>{
	return m.token@*{}(id = .id);
} 

 
// get user


query get_user_name(p:pubkey): (name:name){
	return m.user @{.pubkey == p}(name = .name);
}

query get_user_pubkey(n:name): (pubkey:pubkey){
	return m.user @{.name == n}(pubkey = .pubkey);
}

//user token balance


query get_user_balance(u:name, token:text):(balance:decimal){
	return m.balance@{.user.name == u, .token.symbol == token}(balance = .amount);
}


// get inventory

query get_inventory(u:name): list<(itemid:byte_array, idx:integer)>{
	return m.inventory@*{.user.name == u}(itemid = .item_inst.item.id, idx = .item_inst.id);
}


// get marketplace items
query get_item_listing():list<(id:byte_array, item_id:byte_array, price:decimal, seller:name, idx:integer)>{
	return m.item_listing@*{}(id = .id, item_id = .item_inst.item.id, price = .price, seller = .seller.name, idx = .item_inst.id);
}

// get item market history
query get_item_listing_history(u:name):list<(itemid:byte_array, nftid:integer, seller:name, buyer:name, price:decimal, date:integer)> {
	return m.item_listing_history@*{.buyer.name == u or .seller.name == u}(itemid = .item_inst.item.id, nftid = .item_inst.id, seller = .seller.name, buyer = .buyer.name, price = .price, date = .date);
}


// user token transactions
query gettransactions_byuser(u:name): list<(id:byte_array, token:text, sender:name, receiver:name, date:timestamp)>{
	return m.token_transactions@*{.receiver.name == u or .sender.name == u}(id = .id, token = .token.symbol, sender = .sender.name, receiver = .receiver.name, date = .date);
} 

// pubkey token transactions
query gettransactions_pubkey(p:pubkey): list<(id:byte_array, token:text, sender:pubkey, receiver:pubkey, date:timestamp)>{
	return m.token_transactions@*{.receiver.pubkey == p or .sender.pubkey == p}(id = .id, token = .token.symbol, sender = .sender.pubkey, receiver = .receiver.pubkey, date = .date);
} 





module;
import m: main;


// new tokens airdrop for all users
function f_airdrop(t_amount: decimal, symbol: text){
	
		val c = m.token@{.symbol == symbol};
		for (u in m.user@*{}) {
			create m.balance(u, c, .amount = t_amount);
	
	}
	
}

// init user balance, we used in user creation
function f_create_user_balance(u: m.user) {
	for (c in m.token@*{}) {
		create m.balance(u, c, .amount = 0.0);
	}
}

// update user balance 
function f_update_balance(user: pubkey, token:text, t_amount:decimal, inout:boolean) {
	require( t_amount > 0, "Amount is too low" );
	if (inout) {
		update m.balance@{.user.pubkey == user, .token.symbol == token}(.amount += t_amount);
	} else {
		require( m.balance@{.user.pubkey == user, .token.symbol == token}.amount >= t_amount, "balance is too low" );
		update m.balance@{.user.pubkey == user, .token.symbol == token}(.amount -= t_amount);
	}
}


// random idea provided by @bloody bit

object random_pool { mutable state: byte_array = chain_context.blockchain_rid; }

object random_obj {
 mutable last_rand :decimal = 0.0;
 mutable rand_num : decimal = 0.0;
}

function get_next_random_byte() : byte_array {
 val new_state = (random_pool.state, 
                  op_context.transaction.tx_hash, // current transaction
                     block @ { .block_height == op_context.block_height - 1} .block_rid // last block rid
                     ).hash(); // mix all data together
    random_pool.state = new_state;
    return new_state;
}

function get_next_random_decimal(): decimal {
    val hex = get_next_random_byte().to_hex();
    // pick the last 8 digits (4 bytes)
    val octet = hex.sub(hex.size()-8);
    val seed = integer.from_hex(octet);
    while (random_obj.last_rand == random_obj.rand_num) {
     random_obj.rand_num = (seed * 
           3.141592653589793 // PI number
             ) % 1;
    }
    random_obj.last_rand = random_obj.rand_num;
    return random_obj.last_rand;
   
}

function random_int(low : integer, high: integer) : integer {
 return integer((get_next_random_decimal() * (high - low + 1) + low));
}

// shuffle-algorithm
function shuffle(array: list<integer>) {
 var i = array.size() - 1;
 while (i > 0) {
  val j = random_int(0, i);
  
  // swap
  val temp = array[i];
  array[i] = array[j];
  array[j] = temp;
  
  i--;
 }
}

//end Random


